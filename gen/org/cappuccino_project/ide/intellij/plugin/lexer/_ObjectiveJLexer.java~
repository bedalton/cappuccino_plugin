/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.cappuccino_project.ide.intellij.plugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.cappuccino_project.ide.intellij.plugin.psi.types.ObjJTypes.*;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ObjectiveJLexer.flex</tt>
 */
public class _ObjectiveJLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR = 2;
  public static final int PRAGMA = 4;
  public static final int DOUBLE_QUOTE_STRING = 6;
  public static final int SINGLE_QUOTE_STRING = 8;
  public static final int BLOCK_COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\4\2\30\1\3\22\0\1\2\1\106\1\35\1\65\1\0\1\107\1\110\1\33\1\75"+
    "\1\76\1\55\1\104\1\101\1\54\1\53\1\31\1\44\1\51\6\47\2\52\1\103\1\56\1\27"+
    "\1\102\1\32\1\66\1\74\1\116\1\50\1\72\1\46\1\40\1\46\2\61\1\71\2\61\1\73\1"+
    "\70\1\42\1\43\2\61\1\67\1\41\1\61\1\34\2\61\1\45\1\37\1\61\1\57\1\1\1\60\1"+
    "\111\1\62\1\0\1\23\1\16\1\21\1\15\1\14\1\36\1\13\1\22\1\12\1\61\1\64\1\26"+
    "\1\63\1\10\1\25\1\113\1\114\1\24\1\11\1\20\1\7\1\117\1\115\1\45\1\17\1\61"+
    "\1\77\1\112\1\100\1\105\6\0\1\30\32\0\1\6\337\0\1\6\177\0\13\6\35\0\2\5\5"+
    "\0\1\6\57\0\1\6\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\2\2\15\3\1\4\1\5\1\6\1\7"+
    "\1\10\4\3\2\11\1\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\3\1\1\1\20\1\3\1\1\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\2\3\1\1\1\37"+
    "\1\7\1\40\1\41\1\40\1\42\1\1\2\43\1\44"+
    "\1\42\1\1\1\43\1\45\1\46\1\1\2\0\1\47"+
    "\4\3\1\50\3\3\1\51\1\52\2\3\1\53\14\3"+
    "\1\0\1\54\1\0\1\55\1\0\1\56\1\57\1\60"+
    "\1\61\1\62\7\3\3\0\1\63\1\0\1\64\1\3"+
    "\1\0\1\65\1\66\1\67\1\3\7\0\1\3\12\0"+
    "\1\70\1\71\1\0\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\4\3\3\0"+
    "\1\40\3\0\1\105\3\3\1\106\1\107\4\3\1\110"+
    "\13\3\1\111\5\3\1\112\1\3\1\113\1\114\1\115"+
    "\1\0\1\116\1\0\1\117\1\120\3\3\1\121\1\3"+
    "\1\122\1\64\1\0\1\123\1\124\1\125\1\3\1\126"+
    "\1\3\2\0\1\127\7\0\2\3\15\0\1\130\1\131"+
    "\2\3\1\132\1\3\1\40\2\3\1\133\4\3\1\134"+
    "\4\3\1\135\2\3\1\136\1\3\1\137\1\140\4\3"+
    "\1\141\1\142\1\116\1\143\3\3\1\144\1\145\14\0"+
    "\2\3\4\0\1\146\5\0\1\147\4\0\1\150\1\3"+
    "\1\151\1\40\3\3\1\152\6\3\1\153\1\3\1\154"+
    "\1\155\1\156\2\3\1\0\2\3\1\157\6\0\1\160"+
    "\1\161\4\0\2\3\16\0\1\162\1\40\2\3\1\163"+
    "\1\164\2\3\1\165\1\3\1\166\1\167\1\3\1\170"+
    "\1\0\2\3\1\171\2\0\1\172\1\173\1\174\4\0"+
    "\2\3\5\0\1\175\1\0\1\176\6\0\1\177\2\3"+
    "\1\0\2\3\1\200\1\3\1\0\1\3\1\201\1\0"+
    "\1\202\1\203\1\204\2\0\2\3\2\0\1\205\1\0"+
    "\1\206\1\0\1\207\2\0\1\210\2\0\1\211\1\3"+
    "\5\0\1\3\1\212\1\213\1\0\1\214\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\3\0\1\222\4\0\1\223"+
    "\5\0\1\3\1\224\1\0\1\225\3\0\1\226\1\227"+
    "\1\230\1\0\1\110\3\0\1\231\1\0\1\232\1\0"+
    "\1\233\1\0\1\135\1\137\1\141\2\0\1\152\7\0"+
    "\1\234\5\0\1\235";

  private static int [] zzUnpackAction() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u01e0\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460"+
    "\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0"+
    "\0\u0730\0\u0780\0\u01e0\0\u01e0\0\u07d0\0\u0820\0\u0870\0\u08c0"+
    "\0\u0910\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u0c80\0\u01e0\0\u0cd0\0\u01e0\0\u0d20"+
    "\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0\0\u0f00\0\u0f50\0\u01e0"+
    "\0\u0fa0\0\u0ff0\0\u01e0\0\u1040\0\u1090\0\u10e0\0\u01e0\0\u1090"+
    "\0\u01e0\0\u1130\0\u1180\0\u1130\0\u01e0\0\u11d0\0\u1220\0\u0230"+
    "\0\u1270\0\u01e0\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u0410\0\u1400"+
    "\0\u1450\0\u14a0\0\u14f0\0\u0410\0\u1540\0\u1590\0\u15e0\0\u1630"+
    "\0\u1680\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810\0\u1860\0\u18b0"+
    "\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u19f0\0\u1ae0"+
    "\0\u1b30\0\u01e0\0\u1ae0\0\u1b80\0\u01e0\0\u1bd0\0\u1c20\0\u1c70"+
    "\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0"+
    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u01e0\0\u01e0\0\u01e0\0\u2080"+
    "\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300"+
    "\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580"+
    "\0\u25d0\0\u2620\0\u01e0\0\u01e0\0\u2670\0\u01e0\0\u26c0\0\u01e0"+
    "\0\u01e0\0\u2710\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u2760\0\u27b0\0\u2800\0\u2850\0\u0f50\0\u28a0\0\u28f0\0\u2940"+
    "\0\u10e0\0\u1180\0\u2990\0\u01e0\0\u29e0\0\u2a30\0\u2a80\0\u0410"+
    "\0\u0410\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0\0\u0410\0\u2c10\0\u2c60"+
    "\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u2e40\0\u2e90\0\u2ee0"+
    "\0\u2f30\0\u0410\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u30c0\0\u0410"+
    "\0\u3110\0\u3160\0\u19f0\0\u1a90\0\u31b0\0\u3200\0\u3250\0\u32a0"+
    "\0\u01e0\0\u32f0\0\u3340\0\u3390\0\u0410\0\u33e0\0\u0410\0\u3430"+
    "\0\u3430\0\u1e50\0\u1ea0\0\u1f40\0\u3480\0\u01e0\0\u34d0\0\u3520"+
    "\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750\0\u37a0"+
    "\0\u37f0\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20"+
    "\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0"+
    "\0\u01e0\0\u01e0\0\u3cf0\0\u3d40\0\u0410\0\u3d90\0\u3de0\0\u3e30"+
    "\0\u3e80\0\u0410\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0\0\u0410\0\u4010"+
    "\0\u4060\0\u40b0\0\u4100\0\u0410\0\u4150\0\u41a0\0\u0410\0\u41f0"+
    "\0\u0410\0\u0410\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380\0\u19f0"+
    "\0\u43d0\0\u01e0\0\u4420\0\u4470\0\u44c0\0\u0410\0\u0410\0\u4510"+
    "\0\u4560\0\u45b0\0\u4600\0\u4650\0\u46a0\0\u46f0\0\u4740\0\u4790"+
    "\0\u47e0\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0\0\u4a10"+
    "\0\u4a60\0\u01e0\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0\0\u01e0"+
    "\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u0410\0\u4d80\0\u0410\0\u4dd0"+
    "\0\u4e20\0\u4e70\0\u4ec0\0\u0410\0\u4f10\0\u4f60\0\u4fb0\0\u5000"+
    "\0\u5050\0\u50a0\0\u0410\0\u50f0\0\u0410\0\u0410\0\u0410\0\u5140"+
    "\0\u5190\0\u51e0\0\u5230\0\u5280\0\u0410\0\u52d0\0\u5320\0\u5370"+
    "\0\u53c0\0\u5410\0\u5460\0\u01e0\0\u01e0\0\u54b0\0\u5500\0\u5550"+
    "\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780\0\u57d0"+
    "\0\u5820\0\u5870\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u5a00\0\u5a50"+
    "\0\u5aa0\0\u0410\0\u5af0\0\u5b40\0\u5b90\0\u5be0\0\u0410\0\u5c30"+
    "\0\u5c80\0\u0410\0\u5cd0\0\u0410\0\u0410\0\u5d20\0\u0410\0\u5d70"+
    "\0\u5dc0\0\u5e10\0\u01e0\0\u5e60\0\u5eb0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u6040\0\u6090\0\u60e0\0\u6130"+
    "\0\u6180\0\u61d0\0\u6220\0\u01e0\0\u6270\0\u01e0\0\u62c0\0\u6310"+
    "\0\u6360\0\u63b0\0\u6400\0\u6450\0\u0ff0\0\u64a0\0\u64f0\0\u6540"+
    "\0\u6590\0\u65e0\0\u0410\0\u6630\0\u6680\0\u66d0\0\u0410\0\u6720"+
    "\0\u01e0\0\u6770\0\u01e0\0\u67c0\0\u6810\0\u6860\0\u68b0\0\u6900"+
    "\0\u6950\0\u01e0\0\u69a0\0\u01e0\0\u69f0\0\u01e0\0\u6a40\0\u6a90"+
    "\0\u01e0\0\u6ae0\0\u6b30\0\u5be0\0\u6b80\0\u6bd0\0\u6c20\0\u6c70"+
    "\0\u6cc0\0\u6d10\0\u6d60\0\u0410\0\u0410\0\u6db0\0\u0410\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u6e00\0\u0410\0\u0410\0\u6e50\0\u6ea0\0\u6ef0"+
    "\0\u01e0\0\u6f40\0\u6f90\0\u6fe0\0\u7030\0\u0410\0\u7080\0\u70d0"+
    "\0\u7120\0\u7170\0\u71c0\0\u7210\0\u01e0\0\u7260\0\u01e0\0\u72b0"+
    "\0\u7300\0\u7350\0\u01e0\0\u01e0\0\u01e0\0\u73a0\0\u01e0\0\u73f0"+
    "\0\u7440\0\u7490\0\u0410\0\u74e0\0\u01e0\0\u7530\0\u01e0\0\u7580"+
    "\0\u01e0\0\u01e0\0\u75d0\0\u7620\0\u7670\0\u01e0\0\u76c0\0\u7710"+
    "\0\u7760\0\u77b0\0\u7800\0\u7850\0\u78a0\0\u01e0\0\u78f0\0\u7940"+
    "\0\u7990\0\u79e0\0\u7a30\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\3\12\1\11\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\17\1\26\1\17\1\27\1\30\1\7\1\31\1\32"+
    "\1\33\1\17\1\34\1\35\1\36\1\17\1\37\1\40"+
    "\1\17\1\41\2\17\1\42\1\43\2\42\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\2\17\1\52\1\17\1\53"+
    "\1\54\2\17\1\55\2\17\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\2\17\1\75\1\17\1\76\1\7"+
    "\1\77\1\11\3\100\1\11\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\17"+
    "\1\26\1\17\1\27\1\30\1\7\1\31\1\32\1\101"+
    "\1\17\1\34\1\35\1\36\1\17\1\37\1\40\1\17"+
    "\1\41\2\17\1\42\1\43\2\42\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\17\1\52\1\17\1\53\1\54"+
    "\2\17\1\55\2\17\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\2\17\1\75\1\17\1\76\3\102\3\103"+
    "\25\102\1\104\64\102\1\105\1\106\1\105\2\107\1\110"+
    "\27\105\1\111\62\105\1\112\1\113\1\112\2\107\1\114"+
    "\25\112\1\115\64\112\55\116\1\117\42\116\122\0\1\120"+
    "\1\121\1\122\115\0\1\11\3\0\1\11\120\0\1\17"+
    "\1\123\16\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\1\124\2\17\1\125"+
    "\1\17\1\126\10\17\1\127\1\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\3\17\1\130\7\17\1\131\4\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\2\17\1\132"+
    "\2\17\7\0\1\17\1\133\16\17\5\0\1\17\1\0"+
    "\1\134\14\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\20\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\17\17\1\135\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\5\17\1\136\10\17\1\137\1\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\10\17\1\140\4\17\1\141\2\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\5\17\1\142\12\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\10\17\1\143\2\17\1\144\1\17\1\145\2\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\13\17\1\146\1\147\1\17\1\150\1\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\5\17\1\151\12\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\5\17\1\152\10\17\1\153\1\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\3\154\3\0\21\154\1\155\1\0\1\156\50\154\1\157"+
    "\15\154\3\160\3\0\23\160\1\161\23\160\1\162\24\160"+
    "\1\163\15\160\32\0\1\164\47\0\1\165\24\0\1\166"+
    "\2\17\1\167\10\17\1\170\1\17\1\171\1\172\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\20\17\5\0\1\17\1\0\2\17\1\173"+
    "\12\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\20\17\5\0\1\17\1\0\2\17\1\174\12\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\20\17\5\0"+
    "\1\17\1\0\5\17\1\127\7\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\14\0\1\175\1\0\1\176\6\0"+
    "\1\177\12\0\1\175\2\0\1\177\1\200\1\201\1\0"+
    "\1\200\1\176\1\200\1\42\1\202\60\0\1\175\23\0"+
    "\1\175\3\0\1\42\2\0\1\42\1\0\2\42\1\202"+
    "\53\0\20\17\5\0\1\17\1\0\5\17\1\203\7\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\14\0\1\175"+
    "\23\0\1\175\3\0\1\202\2\0\1\202\1\0\2\202"+
    "\1\204\120\0\1\205\25\0\1\206\117\0\1\207\24\0"+
    "\14\17\1\210\3\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\1\211\2\0"+
    "\1\212\1\0\1\213\1\214\75\0\1\215\1\0\1\216"+
    "\57\0\1\217\51\0\20\17\5\0\1\17\1\0\12\17"+
    "\1\220\2\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\11\0\1\221\1\222\1\223\1\224\1\225\2\0\1\226"+
    "\1\227\1\0\1\230\1\231\1\232\7\0\1\34\21\0"+
    "\1\233\17\0\1\234\13\0\1\235\36\0\1\236\47\0"+
    "\1\237\117\0\1\240\1\0\1\241\115\0\1\242\117\0"+
    "\1\243\117\0\1\244\5\0\1\245\111\0\1\246\117\0"+
    "\1\247\7\0\1\250\14\0\3\17\1\251\7\17\1\252"+
    "\4\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\14\17\1\253\1\17\1\254"+
    "\1\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\2\0\1\255\1\256\1\12\200\0"+
    "\1\257\32\0\3\102\3\0\115\102\3\0\55\102\1\260"+
    "\34\102\1\105\1\261\1\105\2\0\30\105\1\0\62\105"+
    "\1\0\1\105\5\0\2\105\5\0\1\105\1\0\1\105"+
    "\3\0\1\105\7\0\3\105\5\0\1\105\52\0\1\105"+
    "\1\112\1\262\1\112\2\0\26\112\1\0\64\112\1\0"+
    "\1\112\5\0\2\112\5\0\1\112\1\0\1\112\3\0"+
    "\1\112\6\0\2\112\1\0\1\112\5\0\1\112\52\0"+
    "\1\112\55\116\1\263\73\116\1\264\66\116\4\0\1\122"+
    "\122\0\2\17\1\265\3\17\1\266\11\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\17\17\1\267\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\17\17\1\270"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\20\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\2\17\1\271\2\17"+
    "\7\0\4\17\1\272\13\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\16\17"+
    "\1\273\1\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\3\17\1\274\14\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\2\17\1\275\6\17\1\276\6\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\2\17\1\277\15\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\7\17\1\300\7\17\1\301\5\0\1\17\1\0"+
    "\1\302\14\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\1\303\17\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\11\17\1\304"+
    "\6\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\5\17\1\305\12\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\2\17\1\127\15\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\20\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\1\306\4\17\7\0\3\17\1\307\11\17"+
    "\1\310\2\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\1\311\7\17\1\312"+
    "\7\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\14\17\1\313\3\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\2\17\1\314\6\17\1\315\6\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\1\17\1\316\16\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\11\17\1\317\6\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\11\17\1\320"+
    "\6\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\1\17\1\321\16\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\3\154\3\0\22\154\1\0\1\156\71\154\3\0"+
    "\21\154\1\322\1\0\1\156\50\154\1\323\15\154\3\156"+
    "\3\0\22\156\1\0\1\156\1\324\65\156\1\160\1\325"+
    "\1\160\3\0\23\160\1\326\25\160\1\327\40\160\3\161"+
    "\3\0\112\161\32\0\1\330\47\0\1\331\24\0\1\17"+
    "\1\332\16\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\1\17\1\333\16\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\17\17\1\334\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\15\17\1\335\2\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\16\17\1\336"+
    "\1\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\20\17\5\0\1\17\1\0"+
    "\3\17\1\127\11\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\20\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\4\17\1\337\17\0\5\17\44\0\1\340"+
    "\2\0\1\340\1\0\2\340\1\0\1\341\27\0\1\341"+
    "\57\0\1\342\4\0\1\342\112\0\1\343\2\0\1\343"+
    "\1\0\1\343\62\0\1\175\23\0\1\175\3\0\1\200"+
    "\2\0\1\200\1\0\1\200\1\42\1\202\60\0\3\344"+
    "\2\0\1\344\1\0\1\344\12\0\1\344\1\0\1\344"+
    "\3\0\1\344\1\0\5\344\17\0\1\344\23\0\1\344"+
    "\15\0\1\175\23\0\1\175\3\0\1\202\2\0\1\202"+
    "\1\0\2\202\54\0\20\17\5\0\1\17\1\0\5\17"+
    "\1\345\7\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\53\0\1\346\53\0\15\17\1\347\2\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\10\0\1\350\117\0\1\351\25\0\1\352\71\0\1\353"+
    "\13\0\1\354\1\0\1\355\105\0\1\356\127\0\1\357"+
    "\116\0\1\360\156\0\1\361\44\0\20\17\5\0\1\17"+
    "\1\0\5\17\1\362\7\17\6\0\4\17\2\0\5\17"+
    "\17\0\3\17\1\363\1\17\14\0\1\364\113\0\1\365"+
    "\52\0\1\366\62\0\1\367\101\0\1\370\123\0\1\371"+
    "\122\0\1\372\126\0\1\373\112\0\1\374\112\0\1\375"+
    "\112\0\1\376\103\0\1\377\30\0\1\u0100\175\0\1\u0101"+
    "\117\0\1\u0102\24\0\11\17\1\u0103\6\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\3\17\1\u0104\14\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\15\17"+
    "\1\u0105\2\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\3\17\1\u0106\14\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\4\0\1\12\146\0\1\12\64\0\3\102"+
    "\3\0\15\102\1\u0107\74\102\31\116\1\0\66\116\7\0"+
    "\3\17\1\u0108\14\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\5\17\1\u0109"+
    "\12\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\17\17\1\u010a\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\1\17\1\u010b\16\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\15\17"+
    "\1\u010c\2\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\11\17\1\u010d\6\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\11\17\1\u010e\6\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\5\17\1\u010f\12\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\1\u0110"+
    "\17\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\5\17\1\u0111\12\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\14\17\1\u0112\3\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\7\17\1\u0113\10\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\5\17\1\u0114"+
    "\12\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\14\17\1\u0115\3\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\5\17\1\u0116\12\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\2\17\1\u0117\15\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\16\17\1\u0118"+
    "\1\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\5\17\1\127\12\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\15\17\1\u0119\2\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\5\17\1\u011a\12\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\12\17\1\u011b"+
    "\5\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\2\17\1\u011c\6\17\1\u011d"+
    "\6\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\1\u011e\17\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\4\17\1\u011f\13\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\3\154\3\0"+
    "\22\154\1\0\1\156\50\154\1\u0120\15\154\1\160\1\325"+
    "\1\160\3\0\23\160\1\u0121\66\160\7\0\20\326\5\0"+
    "\1\326\1\0\6\326\1\0\2\326\1\0\1\326\10\0"+
    "\1\326\1\0\2\326\2\0\5\326\17\0\5\326\3\327"+
    "\3\0\23\327\1\0\26\327\1\160\37\327\102\0\1\u0122"+
    "\24\0\12\17\1\u0123\5\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\14\17"+
    "\1\u0124\3\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\2\17\1\311\15\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\14\17\1\u0125\3\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\44\0\1\340\2\0\1\340\1\0\2\340\54\0\20\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\4\17"+
    "\1\u0126\17\0\5\17\7\0\20\17\5\0\1\17\1\0"+
    "\15\17\6\0\3\17\1\u0127\2\0\5\17\17\0\5\17"+
    "\15\0\1\u0128\123\0\1\u0129\106\0\1\u012a\4\0\1\u012b"+
    "\117\0\1\u012c\126\0\1\u012d\104\0\1\u012e\1\u012f\143\0"+
    "\1\u0130\104\0\1\u0131\120\0\1\u0132\155\0\1\u0133\44\0"+
    "\1\u0134\17\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\12\17\1\u0135\5\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\26\0\1\u0136\111\0\1\u0137\212\0\1\u0138"+
    "\31\0\1\u0139\107\0\1\u013a\126\0\1\u013b\206\0\1\u013c"+
    "\27\0\1\u013d\114\0\1\u013e\1\u013f\134\0\1\u0140\55\0"+
    "\1\u0141\23\0\1\u0142\117\0\1\u0143\124\0\1\u0144\101\0"+
    "\13\17\1\u0145\4\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\17\17\1\u0146"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\6\17\1\u0147\11\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\3\102\3\0\16\102\1\u0148\73\102\7\0\4\17\1\u0149"+
    "\13\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\20\17\5\0\1\17\1\0"+
    "\1\u014a\14\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\5\17\1\u014b\12\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\11\17"+
    "\1\u014c\6\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\12\17\1\u014d\5\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\14\17\1\u014e\3\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\4\17\1\u014f\13\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\11\17"+
    "\1\u0150\6\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\1\u0151\17\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\17\17\1\u0152\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\20\17"+
    "\5\0\1\17\1\0\15\17\6\0\3\17\1\u0153\2\0"+
    "\5\17\17\0\5\17\7\0\16\17\1\u0154\1\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\20\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\2\17\1\u0155\2\17\7\0"+
    "\13\17\1\u0156\4\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\11\17\1\u0157"+
    "\6\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\7\0\3\17\1\u0158\14\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\15\17\1\u0159\2\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\2\0"+
    "\1\u015a\4\0\20\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\1\160\1\325\1\160"+
    "\3\0\1\160\20\u0121\2\160\1\326\2\160\1\u0121\1\160"+
    "\6\u0121\1\160\2\u0121\1\160\1\u0121\6\160\1\327\1\160"+
    "\1\u0121\1\160\2\u0121\2\160\5\u0121\17\160\5\u0121\7\0"+
    "\11\17\1\u015b\6\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\17\17\1\u015c"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\11\17\1\u015d\6\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\14\0\1\u015e\131\0\1\u015f\106\0\1\u0160\116\0\1\u0161"+
    "\115\0\1\u0162\132\0\1\u0163\106\0\1\u0164\141\0\1\u0165"+
    "\73\0\1\u0166\120\0\1\u0167\114\0\1\u0168\147\0\1\u0169"+
    "\66\0\11\17\1\u016a\6\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\11\17"+
    "\1\u016b\6\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\14\0\1\u016c\117\0\1\u016d"+
    "\130\0\1\u016e\1\u016f\107\0\1\u0170\115\0\1\u0171\117\0"+
    "\1\u0172\114\0\1\u0173\120\0\1\u0174\121\0\1\u0175\112\0"+
    "\1\u0176\136\0\1\u0177\103\0\1\u0178\125\0\1\u0179\106\0"+
    "\5\17\1\u017a\12\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\3\102\3\0\56\102"+
    "\1\u017b\33\102\7\0\1\17\1\u017c\16\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\3\17\1\u017d\14\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\6\17"+
    "\1\u017e\11\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\13\17\1\u017f\4\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\1\17\1\u0180\16\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\4\17\1\u0181\13\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\5\17"+
    "\1\u0182\12\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\17\17\1\u0183\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\5\17\1\u0184\12\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\7\0"+
    "\20\17\5\0\1\17\1\0\1\u0185\14\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\1\17\1\u0186\16\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\1\17\1\u0187\16\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\2\0\1\u015a\23\0\1\u0188\100\0\3\17\1\u0189\14\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\17\17\1\u018a\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\36\0"+
    "\1\u018b\70\0\1\u018c\124\0\1\u018d\141\0\1\u018e\117\0"+
    "\1\u018f\105\0\1\u0190\103\0\1\u0191\172\0\1\u0192\46\0"+
    "\1\u0193\174\0\1\u0194\37\0\17\17\1\u0195\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\3\17\1\u0196\14\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\21\0\1\u0197"+
    "\122\0\1\u0198\117\0\1\u0199\107\0\1\u019a\126\0\1\u019b"+
    "\132\0\1\u019c\76\0\1\u019d\113\0\1\u019e\133\0\1\u019f"+
    "\103\0\1\u01a0\120\0\1\u01a1\121\0\1\u01a2\130\0\1\u01a3"+
    "\117\0\1\u01a4\72\0\3\102\3\0\25\102\1\u01a5\64\102"+
    "\7\0\5\17\1\u01a6\12\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\1\17"+
    "\1\u01a7\16\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\2\0\1\u01a8\4\0\20\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\12\17\1\u01a9\5\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\7\0\5\17\1\u01aa\12\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\11\17"+
    "\1\u01ab\6\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\1\u01ac\17\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\25\0\1\u01ad\101\0\16\17\1\u01ae\1\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\10\17\1\u01af\7\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\15\0"+
    "\1\u01b0\140\0\1\u01b1\75\0\1\u01b2\126\0\1\u01b3\104\0"+
    "\1\u01b4\176\0\1\u01b5\37\0\5\17\1\u01b6\12\17\5\0"+
    "\1\17\1\0\15\17\6\0\4\17\2\0\5\17\17\0"+
    "\5\17\7\0\16\17\1\u01b7\1\17\5\0\1\17\1\0"+
    "\15\17\6\0\4\17\2\0\5\17\17\0\5\17\20\0"+
    "\1\u01b8\135\0\1\u01b9\101\0\1\u01ba\162\0\1\u01bb\62\0"+
    "\1\u01bc\105\0\1\u01bd\113\0\1\u01be\120\0\1\u01bf\132\0"+
    "\1\u01c0\113\0\1\u01c1\107\0\1\u01c2\130\0\1\u01c3\105\0"+
    "\6\17\1\u01c4\11\17\5\0\1\17\1\0\15\17\6\0"+
    "\4\17\2\0\5\17\17\0\5\17\7\0\5\17\1\u01c5"+
    "\12\17\5\0\1\17\1\0\15\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\2\0\1\u01a8\6\0\1\u01c6\1\u01c7"+
    "\3\0\1\u01c8\2\0\1\u01c9\4\0\1\u01ca\100\0\5\17"+
    "\1\u01cb\12\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\7\0\15\17\1\u01cc\2\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\7\0\5\17\1\u01cd\12\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\10\0\1\u01ce\116\0\1\17\1\u01cf\16\17\5\0\1\17"+
    "\1\0\15\17\6\0\4\17\2\0\5\17\17\0\5\17"+
    "\14\0\1\u01d0\120\0\1\u01d1\115\0\1\u01d2\166\0\1\u01d3"+
    "\44\0\11\17\1\u01d4\6\17\5\0\1\17\1\0\15\17"+
    "\6\0\4\17\2\0\5\17\17\0\5\17\7\0\1\17"+
    "\1\u01d5\16\17\5\0\1\17\1\0\15\17\6\0\4\17"+
    "\2\0\5\17\17\0\5\17\25\0\1\u01d6\115\0\1\u01d7"+
    "\110\0\1\u01d8\141\0\1\u01d9\106\0\1\u01da\106\0\1\u01db"+
    "\126\0\1\u01dc\121\0\1\u01dd\101\0\6\17\1\u01de\11\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\22\0\1\u01df\105\0\1\u01e0\126\0\1\u01e1"+
    "\122\0\1\u01e2\122\0\1\u01e3\101\0\16\17\1\u01e4\1\17"+
    "\5\0\1\17\1\0\15\17\6\0\4\17\2\0\5\17"+
    "\17\0\5\17\13\0\1\u01e5\145\0\1\u01e6\102\0\1\u01e7"+
    "\114\0\1\u01e8\106\0\1\u01e9\133\0\1\u01ea\110\0\1\u01eb"+
    "\130\0\1\u01ec\117\0\1\u01ed\116\0\1\u01ee\112\0\1\u01ef"+
    "\117\0\1\u01f0\122\0\1\u01f1\104\0\1\u01f2\116\0\20\17"+
    "\5\0\1\17\1\0\1\u01f3\14\17\6\0\4\17\2\0"+
    "\5\17\17\0\5\17\40\0\1\u01f4\73\0\1\u01f5\123\0"+
    "\1\u01f6\110\0\1\u01f7\132\0\1\u01f8\107\0\1\u01f9\127\0"+
    "\1\u01fa\106\0\1\u01fb\174\0\1\u01fc\52\0\1\u01fd\114\0"+
    "\1\u01fe\101\0\1\u015a\206\0\1\u01ff\46\0\1\u0200\171\0"+
    "\1\u0201\37\0\1\u0202\150\0\1\u0203\101\0\1\u0204\165\0"+
    "\1\u0205\34\0\1\u0206\152\0\1\u0207\116\0\1\u0208\137\0"+
    "\1\u0209\117\0\1\u020a\112\0\1\u020b\130\0\1\u020c\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\20\1\2\11\12\1\3\11"+
    "\5\1\5\11\1\1\1\11\1\1\1\11\10\1\1\11"+
    "\2\1\1\11\3\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\2\0\1\11\31\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\11\7\1\3\0\1\1"+
    "\1\0\2\1\1\0\3\11\1\1\7\0\1\1\12\0"+
    "\2\11\1\0\1\11\1\1\2\11\1\1\6\11\4\1"+
    "\3\0\1\1\3\0\1\11\40\1\1\0\1\1\1\0"+
    "\1\1\1\11\7\1\1\0\4\1\1\11\1\1\2\0"+
    "\1\1\7\0\2\1\15\0\2\11\37\1\1\11\5\1"+
    "\14\0\2\1\4\0\1\11\5\0\1\11\4\0\25\1"+
    "\1\0\3\1\6\0\2\11\4\0\2\1\16\0\16\1"+
    "\1\0\2\1\1\11\2\0\3\11\4\0\2\1\5\0"+
    "\1\11\1\0\1\11\6\0\3\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\11\1\1\1\11\2\0\2\1\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\2\0"+
    "\2\1\5\0\3\1\1\0\1\1\3\11\1\0\2\1"+
    "\3\0\1\11\4\0\1\1\5\0\1\1\1\11\1\0"+
    "\1\11\3\0\3\11\1\0\1\11\3\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\1\1\2\0\1\11"+
    "\7\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private boolean canRegex;
	StringBuffer pragmaString;
	private static final Logger LOGGER = Logger.getLogger("_ObjJLexer.flex");
	private boolean inPreProc = false;

  	public _ObjectiveJLexer() {
    	this((java.io.Reader)null);
  	}

	protected void canRegex(final boolean canRegex) {
		this.canRegex = canRegex;
	}

	protected boolean canRegex() {
		return canRegex;
	}

	private static void log(String message) {
		LOGGER.log(Level.INFO, message);
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ObjectiveJLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 158: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 159: break;
          case 3: 
            { canRegex(false); return ObjJ_ID;
            } 
            // fall through
          case 160: break;
          case 4: 
            { canRegex(true); return ObjJ_LESS_THAN;
            } 
            // fall through
          case 161: break;
          case 5: 
            { canRegex(true); return ObjJ_DIVIDE;
            } 
            // fall through
          case 162: break;
          case 6: 
            { canRegex(true); return ObjJ_GREATER_THAN;
            } 
            // fall through
          case 163: break;
          case 7: 
            { canRegex(false);  yybegin(SINGLE_QUOTE_STRING); return ObjJ_SINGLE_QUO;
            } 
            // fall through
          case 164: break;
          case 8: 
            { canRegex(false);  yybegin(DOUBLE_QUOTE_STRING); return ObjJ_DOUBLE_QUO;
            } 
            // fall through
          case 165: break;
          case 9: 
            { canRegex(false);  return ObjJ_INTEGER_LITERAL;
            } 
            // fall through
          case 166: break;
          case 10: 
            { canRegex(true); return ObjJ_DOT;
            } 
            // fall through
          case 167: break;
          case 11: 
            { canRegex(true); return ObjJ_MINUS;
            } 
            // fall through
          case 168: break;
          case 12: 
            { canRegex(true); return ObjJ_MULTIPLY;
            } 
            // fall through
          case 169: break;
          case 13: 
            { canRegex(true); return ObjJ_SEMI_COLON;
            } 
            // fall through
          case 170: break;
          case 14: 
            { canRegex(true); return ObjJ_OPEN_BRACKET;
            } 
            // fall through
          case 171: break;
          case 15: 
            { canRegex(false); return ObjJ_CLOSE_BRACKET;
            } 
            // fall through
          case 172: break;
          case 16: 
            { canRegex(true); return ObjJ_QUESTION_MARK;
            } 
            // fall through
          case 173: break;
          case 17: 
            { canRegex(true); return ObjJ_OPEN_PAREN;
            } 
            // fall through
          case 174: break;
          case 18: 
            { canRegex(false); return ObjJ_CLOSE_PAREN;
            } 
            // fall through
          case 175: break;
          case 19: 
            { canRegex(true); return ObjJ_OPEN_BRACE;
            } 
            // fall through
          case 176: break;
          case 20: 
            { canRegex(false); return ObjJ_CLOSE_BRACE;
            } 
            // fall through
          case 177: break;
          case 21: 
            { canRegex(true); return ObjJ_COMMA;
            } 
            // fall through
          case 178: break;
          case 22: 
            { canRegex(true); return ObjJ_ASSIGN;
            } 
            // fall through
          case 179: break;
          case 23: 
            { canRegex(true); return ObjJ_COLON;
            } 
            // fall through
          case 180: break;
          case 24: 
            { canRegex(true); return ObjJ_PLUS;
            } 
            // fall through
          case 181: break;
          case 25: 
            { canRegex(true); return ObjJ_BIT_NOT;
            } 
            // fall through
          case 182: break;
          case 26: 
            { canRegex(true); 	return ObjJ_NOT;
            } 
            // fall through
          case 183: break;
          case 27: 
            { canRegex(true); return ObjJ_MODULUS;
            } 
            // fall through
          case 184: break;
          case 28: 
            { canRegex(true); return ObjJ_BIT_AND;
            } 
            // fall through
          case 185: break;
          case 29: 
            { canRegex(true); return ObjJ_BIT_XOR;
            } 
            // fall through
          case 186: break;
          case 30: 
            { canRegex(true); return ObjJ_BIT_OR;
            } 
            // fall through
          case 187: break;
          case 31: 
            { yybegin(YYINITIAL); inPreProc = false; pragmaString = null; return ObjJ_LINE_TERMINATOR;
            } 
            // fall through
          case 188: break;
          case 32: 
            { if (pragmaString != null) pragmaString.append(yytext());
            } 
            // fall through
          case 189: break;
          case 33: 
            { yybegin(YYINITIAL); return ObjJ_PRAGMA_MARKER;
            } 
            // fall through
          case 190: break;
          case 34: 
            { return ObjJ_QUO_TEXT;
            } 
            // fall through
          case 191: break;
          case 35: 
            { return ObjJ_LINE_TERMINATOR;
            } 
            // fall through
          case 192: break;
          case 36: 
            { yybegin(inPreProc ? PREPROCESSOR : pragmaString != null ? PRAGMA : YYINITIAL); return ObjJ_DOUBLE_QUO;
            } 
            // fall through
          case 193: break;
          case 37: 
            { yybegin(inPreProc ? PREPROCESSOR : pragmaString != null ? PRAGMA : YYINITIAL); return ObjJ_SINGLE_QUO;
            } 
            // fall through
          case 194: break;
          case 38: 
            { /*log("Comment:" + yytext());*/ /*return ObjJ_BLOCK_COMMENT_TEXT;*/
            } 
            // fall through
          case 195: break;
          case 39: 
            { return ObjJ_PREPROCESSOR_CONTINUE_ON_NEXT_LINE;
            } 
            // fall through
          case 196: break;
          case 40: 
            { canRegex(false);  return ObjJ_BOOLEAN_LITERAL;
            } 
            // fall through
          case 197: break;
          case 41: 
            { canRegex(true); return ObjJ_IN;
            } 
            // fall through
          case 198: break;
          case 42: 
            { canRegex(true); return ObjJ_IF;
            } 
            // fall through
          case 199: break;
          case 43: 
            { canRegex(false);  return ObjJ_DO;
            } 
            // fall through
          case 200: break;
          case 44: 
            { canRegex(true); return ObjJ_LEFT_SHIFT_ARITHMATIC;
            } 
            // fall through
          case 201: break;
          case 45: 
            { canRegex(true); return ObjJ_LESS_THAN_EQUALS;
            } 
            // fall through
          case 202: break;
          case 46: 
            { canRegex(true); return ObjJ_SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 203: break;
          case 47: 
            { canRegex(false);  /*log("Starting Comment");*/ yybegin(BLOCK_COMMENT); /*return ObjJ_BLOCK_COMMENT_START;*/
            } 
            // fall through
          case 204: break;
          case 48: 
            { canRegex(true); return ObjJ_DIVIDE_ASSIGN;
            } 
            // fall through
          case 205: break;
          case 49: 
            { canRegex(true); return ObjJ_RIGHT_SHIFT_ARITHMATIC;
            } 
            // fall through
          case 206: break;
          case 50: 
            { canRegex(true); return ObjJ_GREATER_THAN_EQUALS;
            } 
            // fall through
          case 207: break;
          case 51: 
            { canRegex(false);  return ObjJ_OCTAL_INTEGER_LITERAL;
            } 
            // fall through
          case 208: break;
          case 52: 
            { canRegex(false);  return ObjJ_DECIMAL_LITERAL;
            } 
            // fall through
          case 209: break;
          case 53: 
            { canRegex(false); return ObjJ_MINUS_MINUS;
            } 
            // fall through
          case 210: break;
          case 54: 
            { canRegex(true); return ObjJ_MINUS_ASSIGN;
            } 
            // fall through
          case 211: break;
          case 55: 
            { canRegex(true); return ObjJ_MULTIPLY_ASSIGN;
            } 
            // fall through
          case 212: break;
          case 56: 
            { canRegex(true); return ObjJ_AT_OPENBRACKET;
            } 
            // fall through
          case 213: break;
          case 57: 
            { canRegex(true); return ObjJ_AT_OPEN_BRACE;
            } 
            // fall through
          case 214: break;
          case 58: 
            { canRegex(true); return ObjJ_ARROW;
            } 
            // fall through
          case 215: break;
          case 59: 
            { canRegex(true); return ObjJ_EQUALS;
            } 
            // fall through
          case 216: break;
          case 60: 
            { canRegex(true); return ObjJ_PLUS_ASSIGN;
            } 
            // fall through
          case 217: break;
          case 61: 
            { canRegex(false); return ObjJ_PLUS_PLUS;
            } 
            // fall through
          case 218: break;
          case 62: 
            { canRegex(true); return ObjJ_NOT_EQUALS;
            } 
            // fall through
          case 219: break;
          case 63: 
            { canRegex(true); return ObjJ_MODULUS_ASSIGN;
            } 
            // fall through
          case 220: break;
          case 64: 
            { canRegex(true); return ObjJ_BIT_AND_ASSIGN;
            } 
            // fall through
          case 221: break;
          case 65: 
            { canRegex(true); return ObjJ_AND;
            } 
            // fall through
          case 222: break;
          case 66: 
            { canRegex(true); return ObjJ_BIT_XOR_ASSIGN;
            } 
            // fall through
          case 223: break;
          case 67: 
            { canRegex(true); return ObjJ_BIT_OR_ASSIGN;
            } 
            // fall through
          case 224: break;
          case 68: 
            { canRegex(true); return ObjJ_OR;
            } 
            // fall through
          case 225: break;
          case 69: 
            { yybegin(YYINITIAL); canRegex(true); /*log("Ending Comment");*/ return ObjJ_BLOCK_COMMENT;
            } 
            // fall through
          case 226: break;
          case 70: 
            { canRegex(false); return ObjJ_NIL;
            } 
            // fall through
          case 227: break;
          case 71: 
            { canRegex(true); return ObjJ_NEW;
            } 
            // fall through
          case 228: break;
          case 72: 
            { canRegex(false);  return ObjJ_VAR_TYPE_INT;
            } 
            // fall through
          case 229: break;
          case 73: 
            { canRegex(false);  return ObjJ_TRY;
            } 
            // fall through
          case 230: break;
          case 74: 
            { canRegex(false);  return ObjJ_LET;
            } 
            // fall through
          case 231: break;
          case 75: 
            { canRegex(true); return ObjJ_LEFT_SHIFT_LOGICAL;
            } 
            // fall through
          case 232: break;
          case 76: 
            { canRegex(true); return ObjJ_LEFT_SHIFT_ARITHMATIC_ASSIGN;
            } 
            // fall through
          case 233: break;
          case 77: 
            { canRegex(false);  return ObjJ_IMPORT_FRAMEWORK_LITERAL;
            } 
            // fall through
          case 234: break;
          case 78: 
            { /*final String text = yytext().toString();
    											final int backtrack = text.length() -1;
    											int i = 1;
    											String nextChar;
    											do {
    												nextChar = text.substr(i,++i);
    												backtrack--;
    											}
    											while(!nextChar.equals(" "));
    											if (canRegex()) {
    												canRegex(true);
    												return ObjJ_REGULAR_EXPRESSION_LITERAL_TOKEN;
    										 	} else {
    										 		yypushback(yytext().length()-1);
    										 		return ObjJ_DIVIDE;
    										 	}*/
											if (canRegex()) {
												canRegex(true);
												return ObjJ_REGULAR_EXPRESSION_LITERAL_TOKEN;
										 	} else if (yytext().toString().substring(1,2).equals("=")){
										 		yypushback(yytext().length()-2);
										 		return ObjJ_DIVIDE_ASSIGN;
											} else {
												yypushback(yytext().length()-1);
										 		return ObjJ_DIVIDE;
										 	}
            } 
            // fall through
          case 235: break;
          case 79: 
            { canRegex(true); return ObjJ_RIGHT_SHIFT_LOGICAL;
            } 
            // fall through
          case 236: break;
          case 80: 
            { canRegex(true); return ObjJ_RIGHT_SHIFT_ARITHMATIC_ASSIGN;
            } 
            // fall through
          case 237: break;
          case 81: 
            { canRegex(true); return ObjJ_FOR;
            } 
            // fall through
          case 238: break;
          case 82: 
            { canRegex(true); return ObjJ_VAR_TYPE_SEL;
            } 
            // fall through
          case 239: break;
          case 83: 
            { canRegex(false);  return ObjJ_BINARY_INTEGER_LITERAL;
            } 
            // fall through
          case 240: break;
          case 84: 
            { canRegex(false);  return ObjJ_OCTAL_INTEGER_LITERAL2;
            } 
            // fall through
          case 241: break;
          case 85: 
            { canRegex(false);  return ObjJ_HEX_INTEGER_LITERAL;
            } 
            // fall through
          case 242: break;
          case 86: 
            { canRegex(true); return ObjJ_ELLIPSIS;
            } 
            // fall through
          case 243: break;
          case 87: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true;return ObjJ_PP_IF;
            } 
            // fall through
          case 244: break;
          case 88: 
            { canRegex(true); return ObjJ_IDENTITY__EQUALS;
            } 
            // fall through
          case 245: break;
          case 89: 
            { canRegex(true); return ObjJ_IDENTITY_NOT_EQUALS;
            } 
            // fall through
          case 246: break;
          case 90: 
            { canRegex(true); return ObjJ_VAR;
            } 
            // fall through
          case 247: break;
          case 91: 
            { canRegex(false); return ObjJ_NULL_LITERAL;
            } 
            // fall through
          case 248: break;
          case 92: 
            { canRegex(true); return ObjJ_ELSE;
            } 
            // fall through
          case 249: break;
          case 93: 
            { canRegex(false);  return ObjJ_VAR_TYPE_BYTE;
            } 
            // fall through
          case 250: break;
          case 94: 
            { canRegex(true); return ObjJ_THIS;
            } 
            // fall through
          case 251: break;
          case 95: 
            { canRegex(false);  return ObjJ_VAR_TYPE_CHAR;
            } 
            // fall through
          case 252: break;
          case 96: 
            { canRegex(true); return ObjJ_CASE;
            } 
            // fall through
          case 253: break;
          case 97: 
            { canRegex(false);  return ObjJ_VAR_TYPE_LONG;
            } 
            // fall through
          case 254: break;
          case 98: 
            { canRegex(true); return ObjJ_LEFT_SHIFT_LOGICAL_ASSIGN;
            } 
            // fall through
          case 255: break;
          case 99: 
            { canRegex(true); return ObjJ_RIGHT_SHIFT_LOGICAL_ASSIGN;
            } 
            // fall through
          case 256: break;
          case 100: 
            { canRegex(false);  return ObjJ_VAR_TYPE_BOOL;
            } 
            // fall through
          case 257: break;
          case 101: 
            { canRegex(false);  return ObjJ_MARK;
            } 
            // fall through
          case 258: break;
          case 102: 
            { canRegex(false); return ObjJ_AT_END;
            } 
            // fall through
          case 259: break;
          case 103: 
            { canRegex(false); return ObjJ_AT_REF;
            } 
            // fall through
          case 260: break;
          case 104: 
            { canRegex(true); return ObjJ_WITH;
            } 
            // fall through
          case 261: break;
          case 105: 
            { canRegex(true); return ObjJ_VOID;
            } 
            // fall through
          case 262: break;
          case 106: 
            { canRegex(false);  return ObjJ_VAR_TYPE_SHORT;
            } 
            // fall through
          case 263: break;
          case 107: 
            { canRegex(false);  return ObjJ_BREAK;
            } 
            // fall through
          case 264: break;
          case 108: 
            { canRegex(true); return ObjJ_THROW;
            } 
            // fall through
          case 265: break;
          case 109: 
            { canRegex(true); return ObjJ_CATCH;
            } 
            // fall through
          case 266: break;
          case 110: 
            { canRegex(false);  return ObjJ_CONST;
            } 
            // fall through
          case 267: break;
          case 111: 
            { canRegex(false);  return ObjJ_VAR_TYPE_FLOAT;
            } 
            // fall through
          case 268: break;
          case 112: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true;return ObjJ_PP_ELSE;
            } 
            // fall through
          case 269: break;
          case 113: 
            { canRegex(false); yybegin(PREPROCESSOR); inPreProc = true; return ObjJ_PP_ELSE_IF;
            } 
            // fall through
          case 270: break;
          case 114: 
            { canRegex(true); return ObjJ_WHILE;
            } 
            // fall through
          case 271: break;
          case 115: 
            { canRegex(false);  return ObjJ_VAR_TYPE_SIGNED;
            } 
            // fall through
          case 272: break;
          case 116: 
            { canRegex(true); return ObjJ_SWITCH;
            } 
            // fall through
          case 273: break;
          case 117: 
            { canRegex(true); return ObjJ_DELETE;
            } 
            // fall through
          case 274: break;
          case 118: 
            { canRegex(false);  return ObjJ_VAR_TYPE_DOUBLE;
            } 
            // fall through
          case 275: break;
          case 119: 
            { canRegex(true); return ObjJ_TYPE_OF;
            } 
            // fall through
          case 276: break;
          case 120: 
            { canRegex(true); return ObjJ_RETURN;
            } 
            // fall through
          case 277: break;
          case 121: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true; return ObjJ_PP_UNDEF;
            } 
            // fall through
          case 278: break;
          case 122: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true;return ObjJ_PP_IF_DEF;
            } 
            // fall through
          case 279: break;
          case 123: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true;return ObjJ_PP_END_IF;
            } 
            // fall through
          case 280: break;
          case 124: 
            { canRegex(false); yybegin(PREPROCESSOR); inPreProc = true; return ObjJ_PP_ERROR;
            } 
            // fall through
          case 281: break;
          case 125: 
            { canRegex(false); return ObjJ_AT_DEREF;
            } 
            // fall through
          case 282: break;
          case 126: 
            { canRegex(false); return ObjJ_AT_CLASS;
            } 
            // fall through
          case 283: break;
          case 127: 
            { if (pragmaString == null) pragmaString = new StringBuffer(); return ObjJ_MARK;
            } 
            // fall through
          case 284: break;
          case 128: 
            { canRegex(true); return ObjJ_DEFAULT;
            } 
            // fall through
          case 285: break;
          case 129: 
            { canRegex(true); return ObjJ_FINALLY;
            } 
            // fall through
          case 286: break;
          case 130: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true;return ObjJ_PP_IF_NDEF;
            } 
            // fall through
          case 287: break;
          case 131: 
            { canRegex(true); yybegin(PREPROCESSOR); inPreProc = true; return ObjJ_PP_DEFINE;
            } 
            // fall through
          case 288: break;
          case 132: 
            { canRegex(false); yybegin(PRAGMA); return ObjJ_PP_PRAGMA;
            } 
            // fall through
          case 289: break;
          case 133: 
            { canRegex(false); return ObjJ_AT_IMPORT;
            } 
            // fall through
          case 290: break;
          case 134: 
            { canRegex(false); return ObjJ_AT_GLOBAL;
            } 
            // fall through
          case 291: break;
          case 135: 
            { canRegex(false); return ObjJ_AT_ACTION;
            } 
            // fall through
          case 292: break;
          case 136: 
            { canRegex(false); return ObjJ_AT_OUTLET;
            } 
            // fall through
          case 293: break;
          case 137: 
            { canRegex(false);  return ObjJ_VAR_TYPE_UNSIGNED;
            } 
            // fall through
          case 294: break;
          case 138: 
            { canRegex(true); return ObjJ_DEBUGGER;
            } 
            // fall through
          case 295: break;
          case 139: 
            { canRegex(true); return ObjJ_CONTINUE;
            } 
            // fall through
          case 296: break;
          case 140: 
            { canRegex(true); return ObjJ_FUNCTION;
            } 
            // fall through
          case 297: break;
          case 141: 
            { canRegex(false);	yybegin(PREPROCESSOR); inPreProc = true;return ObjJ_PP_INCLUDE;
            } 
            // fall through
          case 298: break;
          case 142: 
            { canRegex(false); return ObjJ_PP_DEFINED;
            } 
            // fall through
          case 299: break;
          case 143: 
            { canRegex(false); yybegin(PREPROCESSOR); inPreProc = true; return ObjJ_PP_WARNING;
            } 
            // fall through
          case 300: break;
          case 144: 
            { canRegex(true); return ObjJ_VAR_TYPE_IBOUTLET;
            } 
            // fall through
          case 301: break;
          case 145: 
            { canRegex(true); return ObjJ_VAR_TYPE_IBACTION;
            } 
            // fall through
          case 302: break;
          case 146: 
            { canRegex(false); return ObjJ_AT_TYPE_DEF;
            } 
            // fall through
          case 303: break;
          case 147: 
            { canRegex(false); return ObjJ_UNDEFINED;
            } 
            // fall through
          case 304: break;
          case 148: 
            { canRegex(false);  return ObjJ_VAR_TYPE_LONG_LONG;
            } 
            // fall through
          case 305: break;
          case 149: 
            { canRegex(false); return ObjJ_AT_SELECTOR;
            } 
            // fall through
          case 306: break;
          case 150: 
            { canRegex(false); return ObjJ_AT_REQUIRED;
            } 
            // fall through
          case 307: break;
          case 151: 
            { canRegex(false); return ObjJ_AT_OPTIONAL;
            } 
            // fall through
          case 308: break;
          case 152: 
            { canRegex(false); return ObjJ_AT_PROTOCOL;
            } 
            // fall through
          case 309: break;
          case 153: 
            { canRegex(true); return ObjJ_INSTANCE_OF;
            } 
            // fall through
          case 310: break;
          case 154: 
            { canRegex(false); return ObjJ_AT_INTERFACE;
            } 
            // fall through
          case 311: break;
          case 155: 
            { canRegex(false); return ObjJ_AT_ACCESSORS;
            } 
            // fall through
          case 312: break;
          case 156: 
            { canRegex(false); return ObjJ_AT_IMPLEMENTATION;
            } 
            // fall through
          case 313: break;
          case 157: 
            { return ObjJ_ERROR_SEQUENCE_TOKEN;
            } 
            // fall through
          case 314: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
